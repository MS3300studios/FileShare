///<amd-module name="Core/Medius.Core.Web/Scripts/Medius/components/grid/editable/grid"/>

import * as ko from "knockout";
import * as _ from "underscore";
import * as koUtils from "Core/Medius.Core.Web/Scripts/Medius/knockout/utils";
import * as dataGrid from "Core/Medius.Core.Web/Scripts/Medius/components/grid/default/grid";
const objectBackup = require("medius/lib/backup/object");

class EditableGrid(dataSource, options) {
    isAnyRowInEdit: ko.Observable<Boolean>

    constructor(){

        this.isAnyRowInEdit = ko.observable(false);
        const options = _.extend({
            template: "grid-editable-tpl"
        }, options);
        
        
        Grid.call(self, dataSource, options);
    }

}

_.extend(EditableGrid.prototype, Grid.prototype, {

    addEmptyRow: function () {
        var self = this,
            row;

        if (self.isAnyRowInEdit()) {
            return;
        }

        row = self.DataSource.getNewRow();
        row.isEditable = ko.observable(true);
        row.justAdded = true;
        
        if (_.isFunction(self.DataSource.addRow)) {
            self.DataSource.addRow(row);
        }

        Grid.prototype.addRow.call(self, row);
        self.SelectedRow(null);

        self.turnOnEditMode(row);
    },
    
    turnOnEditMode: function (row) {
        row.isEditable(true);
        this.isAnyRowInEdit(true);
    },

    turnOffEditMode: function (row) {
        row.isEditable(false);
        this.isAnyRowInEdit(false);
    },
    
    cancelRow: function (row) {
        var self = this;
        
        if (koUtils.unpack(row.justAdded)) {
            self.removeRow(row);
        } else {
            row.backup.revert();
            row.backup = null;
        }
        
        self.turnOffEditMode(row);
    },
    
    editRow: function (row, backupModule) {
        var self = this;
        
        if (self.isAnyRowInEdit()) {
            return;
        }
        
        if (_.isUndefined(backupModule)) {
            backupModule = objectBackup;
        }

        row.backup = backupModule.create(row);
        
        self.turnOnEditMode(row);
    },
    
    saveRow: function (row) {
        var self = this,
            validationResult;

        if (_.isFunction(self.DataSource.validateRow)) {
            validationResult = self.DataSource.validateRow(row);
            if (validationResult === false) {
                return false;
            }
        }

        if (_.isFunction(self.DataSource.saveRow)) {
            self.DataSource.saveRow(row);
        }
        
        row.justAdded = false;
        self.turnOffEditMode(row);
    },

    removeRow: function (row) {
        var self = this;

        if (_.isFunction(self.DataSource.removeRow)) {
            self.DataSource.removeRow(row);
        }
        Grid.prototype.removeRow.call(self, row);
    }

});

export function create(dataSource: any, options: any) {
    return new EditableGrid(dataSource, options);
}
export const derive = EditableGrid;